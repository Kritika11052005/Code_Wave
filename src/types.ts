// Import Monaco editor types to use them in the editor-related interfaces
import { Monaco } from "@monaco-editor/react";
// Import ID type from Convex database model
import { Id } from "../convex/_generated/dataModel";
// Import everything from monaco-editor as a namespace
import * as monaco from "monaco-editor";

// Interface that defines how a theme is represented
export interface Theme {
    id: string;          // Unique identifier for the theme (e.g., "vs-dark")
    label: string;       // Name shown to the user (e.g., "Dark Theme")
    color: string;       // Background color used in UI preview (e.g., "#000000")
}

// Interface that defines how a programming language is represented
export interface Language {
    id: string;                  // Unique ID (e.g., "python", "cpp")
    label: string;               // Name shown to the user (e.g., "Python")
    logoPath: string;           // Path to the logo image for the language
    monacoLanguage: string;     // Language name used by Monaco (e.g., "python")
    defaultCode: string;        // Initial code that appears in editor
    pistonRuntime: LanguageRuntime; // Runtime info used for execution with Piston API
}

// Interface for runtime details of a language for execution
export interface LanguageRuntime {
    language: string;   // Language name (e.g., "python")
    version: string;    // Version string (e.g., "3.11.0")
}

// Interface for the response after code is executed using Piston API
export interface ExecuteCodeResponse {
    compile?: {               // Optional compile result
        output: string;       // Output from compilation
    };
    run?: {                   // Optional run result
        output: string;       // Standard output from execution
        stderr: string;       // Error output (if any)
    };
}

// Interface to store final code execution result in the app
export interface ExecutionResult {
    code: string;             // Code that was executed
    output: string;           // Output shown in result
    error: string | null;     // Any runtime error or null if no error
}

// ❌ This is a note: If you had added "monaco: typeof monaco;" inside the CodeEditorState interface,
// delete that line because it's not needed here.

// Interface for managing the state of the editor using Zustand
export interface CodeEditorState {
    language: string;   // Current selected language (e.g., "python")
    theme: string;      // Current selected theme (e.g., "vs-dark")
    fontSize: number;   // Font size in the editor (e.g., 16)
    output: string;     // Last output shown from running the code
    isRunning: boolean; // If true, code is currently being executed
    error: string | null; // Error message if any, else null
    editor: monaco.editor.IStandaloneCodeEditor | null; // Editor instance object
    executionResult: {
        code: string;           // Executed code
        output: string;         // Output
        error: string | null;   // Error or null
    } | null;
    getCode: () => string;                                // Function to get code from editor
    setEditor: (editor: monaco.editor.IStandaloneCodeEditor) => void; // Set editor instance
    setTheme: (theme: string) => void;                    // Set editor theme
    setFontSize: (fontSize: number) => void;              // Set font size
    setLanguage: (language: string) => void;              // Set programming language
    runCode: () => Promise<void>;                         // Function to execute the code
}

// Interface to represent a code snippet stored in the backend
export interface Snippet {
    _id: Id<"snippets">;          // Unique ID generated by Convex
    _creationTime: number;       // Timestamp when the snippet was created
    userId: string;              // ID of the user who created the snippet
    language: string;            // Programming language used in snippet
    code: string;                // The actual code text
    title: string;               // Title given to the snippet
    userName: string;            // Name of the user who created it
}
